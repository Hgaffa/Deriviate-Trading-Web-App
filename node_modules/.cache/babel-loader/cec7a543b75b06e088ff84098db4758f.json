{"ast":null,"code":"import \"antd/es/table/style\";\nimport _Table from \"antd/es/table\";\nimport \"antd/es/tag/style\";\nimport _Tag from \"antd/es/tag\";\nimport _classCallCheck from \"C:\\\\Users\\\\hgaff\\\\OneDrive\\\\Documents\\\\derivativesnew\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\hgaff\\\\OneDrive\\\\Documents\\\\derivativesnew\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\hgaff\\\\OneDrive\\\\Documents\\\\derivativesnew\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\hgaff\\\\OneDrive\\\\Documents\\\\derivativesnew\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\hgaff\\\\OneDrive\\\\Documents\\\\derivativesnew\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport \"antd/es/typography/style\";\nimport _Typography from \"antd/es/typography\";\nvar _jsxFileName = \"C:\\\\Users\\\\hgaff\\\\OneDrive\\\\Documents\\\\derivativesnew\\\\src\\\\components\\\\reportgenerate.js\";\nimport React from \"react\";\nvar Title = _Typography.Title;\n\nvar ReportGenerate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ReportGenerate, _React$Component);\n\n  function ReportGenerate() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ReportGenerate);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ReportGenerate)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      date: \"\",\n      now: new Date(),\n      data: []\n    };\n    return _this;\n  }\n\n  _createClass(ReportGenerate, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var data = this.props.location.state.data;\n      var date = this.props.match.params.date;\n      this.setState({\n        date: date\n      });\n      this.setState({\n        data: data\n      });\n      console.log(\"get report for date \".concat(this.props.location.state));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var columns = [{\n        title: \"Trade ID\",\n        dataIndex: \"tradeid\",\n        key: \"tradeid\"\n      }, {\n        title: \"Buying party\",\n        dataIndex: \"buyer\",\n        key: \"buyer\"\n      }, {\n        title: \"Selling party\",\n        dataIndex: \"seller\",\n        key: \"seller\"\n      }, {\n        title: \"Product\",\n        dataIndex: \"product\",\n        key: \"product\"\n      }, {\n        title: \"Quantity\",\n        dataIndex: \"quantity\",\n        key: \"quantity\"\n      }, {\n        title: \"Notional currency\",\n        dataIndex: \"notionalcurrency\",\n        key: \"notionalcurrency\"\n      }, {\n        title: \"Underlying currency\",\n        dataIndex: \"underlyingcurrency\",\n        key: \"underlyingcurrency\"\n      }, {\n        title: \"Strike price\",\n        dataIndex: \"strikeprice\",\n        key: \"strikeprice\"\n      }, {\n        title: \"Market value\",\n        dataIndex: \"marketvalue\",\n        key: \"marketvalue\"\n      }, {\n        title: \"Notional value\",\n        dataIndex: \"notionalvalue\",\n        key: \"notionalvalue\"\n      }, {\n        title: \"Expiry date\",\n        dataIndex: \"date\",\n        key: \"date\"\n      }, {\n        title: \"Expiry time\",\n        dataIndex: \"time\",\n        key: \"time\"\n      }, {\n        title: \"Tags\",\n        dataIndex: \"tags\",\n        key: \"tags\",\n        render: function render(tags) {\n          return React.createElement(React.Fragment, null, function (tag) {\n            var color = tag.length > 6 ? \"volcano\" : \"green\";\n            return React.createElement(_Tag, {\n              color: color,\n              key: tag,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 89\n              },\n              __self: this\n            }, tag.toUpperCase());\n          });\n        }\n      }];\n      return React.createElement(\"section\", {\n        style: {\n          margin: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Trade report for \".concat(this.state.date)), \"Report generated on \", this.state.now.toLocaleDateString(\"zh-CN\"), \" at \", this.state.now.toLocaleTimeString(), React.createElement(_Table, {\n        dataSource: this.state.data,\n        columns: columns,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ReportGenerate;\n}(React.Component);\n\nexport default ReportGenerate;","map":{"version":3,"sources":["C:/Users/hgaff/OneDrive/Documents/derivativesnew/src/components/reportgenerate.js"],"names":["React","Title","ReportGenerate","state","date","now","Date","data","props","location","match","params","setState","console","log","columns","title","dataIndex","key","render","tags","tag","color","length","toUpperCase","margin","toLocaleDateString","toLocaleTimeString","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Typography, Button, Table, Tag } from \"antd\";\r\nconst { Title } = Typography;\r\n\r\nclass ReportGenerate extends React.Component {\r\n  state = {\r\n    date: \"\",\r\n    now: new Date(),\r\n    data: []\r\n  };\r\n  componentDidMount() {\r\n    const { data } = this.props.location.state\r\n    const { date } = this.props.match.params\r\n    this.setState({date : date})\r\n    this.setState({data : data})\r\n    console.log(`get report for date ${this.props.location.state}`);\r\n  }\r\n  render() {\r\n    const columns = [\r\n      {\r\n        title: \"Trade ID\",\r\n        dataIndex: \"tradeid\",\r\n        key: \"tradeid\"\r\n      },\r\n      {\r\n        title: \"Buying party\",\r\n        dataIndex: \"buyer\",\r\n        key: \"buyer\"\r\n      },\r\n      {\r\n        title: \"Selling party\",\r\n        dataIndex: \"seller\",\r\n        key: \"seller\"\r\n      },\r\n      {\r\n        title: \"Product\",\r\n        dataIndex: \"product\",\r\n        key: \"product\"\r\n      },\r\n      {\r\n        title: \"Quantity\",\r\n        dataIndex: \"quantity\",\r\n        key: \"quantity\"\r\n      },\r\n      {\r\n        title: \"Notional currency\",\r\n        dataIndex: \"notionalcurrency\",\r\n        key: \"notionalcurrency\"\r\n      },\r\n      {\r\n        title: \"Underlying currency\",\r\n        dataIndex: \"underlyingcurrency\",\r\n        key: \"underlyingcurrency\"\r\n      },\r\n      {\r\n        title: \"Strike price\",\r\n        dataIndex: \"strikeprice\",\r\n        key: \"strikeprice\"\r\n      },\r\n      {\r\n        title: \"Market value\",\r\n        dataIndex: \"marketvalue\",\r\n        key: \"marketvalue\"\r\n      },\r\n      {\r\n        title: \"Notional value\",\r\n        dataIndex: \"notionalvalue\",\r\n        key: \"notionalvalue\"\r\n      },\r\n      {\r\n        title: \"Expiry date\",\r\n        dataIndex: \"date\",\r\n        key: \"date\"\r\n      },\r\n      {\r\n        title: \"Expiry time\",\r\n        dataIndex: \"time\",\r\n        key: \"time\"\r\n      },\r\n      {\r\n        title: \"Tags\",\r\n        dataIndex: \"tags\",\r\n        key: \"tags\",\r\n        render: tags => (\r\n          <>\r\n            {tag => {\r\n              let color = tag.length > 6 ? \"volcano\" : \"green\";\r\n              return (\r\n                <Tag color={color} key={tag}>\r\n                  {tag.toUpperCase()}\r\n                </Tag>\r\n              );\r\n            }}\r\n          </>\r\n        )\r\n      }\r\n    ];\r\n\r\n    return (\r\n      <section style={{ margin: 20 }}>\r\n        <Title>{`Trade report for ${this.state.date}`}</Title>\r\n        {\"Report generated on \"}\r\n        {this.state.now.toLocaleDateString(\"zh-CN\")}\r\n        {\" at \"}\r\n        {this.state.now.toLocaleTimeString()}\r\n        <Table dataSource={this.state.data} columns={columns} />\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ReportGenerate;\r\n"]},"metadata":{},"sourceType":"module"}