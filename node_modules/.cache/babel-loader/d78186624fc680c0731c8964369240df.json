{"ast":null,"code":"import \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport _classCallCheck from \"C:\\\\Users\\\\hgaff\\\\OneDrive\\\\Documents\\\\derivativesnew\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\hgaff\\\\OneDrive\\\\Documents\\\\derivativesnew\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\hgaff\\\\OneDrive\\\\Documents\\\\derivativesnew\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\hgaff\\\\OneDrive\\\\Documents\\\\derivativesnew\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\hgaff\\\\OneDrive\\\\Documents\\\\derivativesnew\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport \"antd/es/typography/style\";\nimport _Typography from \"antd/es/typography\";\nvar _jsxFileName = \"C:\\\\Users\\\\hgaff\\\\OneDrive\\\\Documents\\\\derivativesnew\\\\src\\\\components\\\\reportpdf.js\";\nimport React from \"react\";\nimport ReportGenerate from \"./reportgenerate\";\nimport { Link } from \"react-router-dom\";\nvar Title = _Typography.Title;\n\nvar ReportPDF =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ReportPDF, _React$Component);\n\n  function ReportPDF() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ReportPDF);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ReportPDF)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      button: true,\n      now: new Date(),\n      date: _this.props.date,\n      trades: []\n    };\n\n    _this.onDownload = function (e) {\n      _this.setState({\n        button: false\n      });\n\n      console.log(\"Report downloaded for \".concat(_this.state.date));\n    };\n\n    return _this;\n  }\n\n  _createClass(ReportPDF, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var now = this.state.now.getTime();\n      console.log(\"date format for now is \".concat(now));\n      var fixedDate = new Date(this.state.trades[2].date).getTime();\n      console.log(\"date format for trade is \".concat(fixedDate)); // active editable is meant to be for trades added today right?\n      // I don't think we have data for these trades - maybe we have to filter it by\n      // the trades available on the portfolio page ?\n\n      var i;\n\n      for (i = 0; i < this.state.trades.length; i++) {\n        var expiry = new Date(this.state.trades[i].date).getTime();\n\n        if (expiry <= now) {\n          this.state.trades[i].tags = \"Inactive\";\n        } else {\n          this.state.trades[i].tags = \"Active\";\n        }\n      }\n\n      this.state.trades.filter(function (trade) {\n        return new Date(trade.date) > now.toString();\n      }) // this probably won't work because of formatting\n      .forEach(function (trade) {\n        return trade.tags = \"Active editable\";\n      });\n      this.state.trades.filter(function (trade) {\n        return trade.date == now;\n      }).forEach(function (trade) {\n        return trade.tags = \"Active uneditable\";\n      });\n      this.state.trades.filter(function (trade) {\n        return trade.date < now;\n      }).forEach(function (trade) {\n        return trade.tags = \"Inactive\";\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Link, {\n        to: {\n          pathname: \"/pdf/\".concat(this.state.date),\n          state: {\n            data: this.state.trades\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(_Button, {\n        type: \"link\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Download\"));\n    }\n  }]);\n\n  return ReportPDF;\n}(React.Component);\n\nexport default ReportPDF;","map":{"version":3,"sources":["C:/Users/hgaff/OneDrive/Documents/derivativesnew/src/components/reportpdf.js"],"names":["React","ReportGenerate","Link","Title","ReportPDF","state","button","now","Date","date","props","trades","onDownload","e","setState","console","log","getTime","fixedDate","i","length","expiry","tags","filter","trade","toString","forEach","pathname","data","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Typography, Button, Table, Tag } from \"antd\";\r\nimport ReportGenerate from \"./reportgenerate\";\r\nimport { Link } from \"react-router-dom\";\r\nconst { Title } = Typography;\r\n\r\nclass ReportPDF extends React.Component {\r\n  state = {\r\n    button: true,\r\n    now: new Date(),\r\n    date: this.props.date,\r\n    trades: []\r\n  };\r\n  onDownload = e => {\r\n    this.setState({\r\n      button: false\r\n    });\r\n    console.log(`Report downloaded for ${this.state.date}`)\r\n  };\r\n  componentDidMount() {\r\n    var now = this.state.now.getTime();\r\n    console.log(`date format for now is ${now}`);\r\n    var fixedDate = new Date(this.state.trades[2].date).getTime();\r\n    console.log(`date format for trade is ${fixedDate}`);\r\n    // active editable is meant to be for trades added today right?\r\n    // I don't think we have data for these trades - maybe we have to filter it by\r\n    // the trades available on the portfolio page ?\r\n    var i;\r\n    for (i = 0; i < this.state.trades.length; i++) {\r\n      var expiry = new Date(this.state.trades[i].date).getTime();\r\n      if (expiry <= now) {\r\n        this.state.trades[i].tags = \"Inactive\";\r\n      } else {\r\n        this.state.trades[i].tags = \"Active\";\r\n      }\r\n    }\r\n    this.state.trades\r\n      .filter(trade => new Date(trade.date) > now.toString()) // this probably won't work because of formatting\r\n      .forEach(trade => (trade.tags = \"Active editable\"));\r\n    this.state.trades\r\n      .filter(trade => trade.date == now)\r\n      .forEach(trade => (trade.tags = \"Active uneditable\"));\r\n    this.state.trades\r\n      .filter(trade => trade.date < now)\r\n      .forEach(trade => (trade.tags = \"Inactive\"));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Link\r\n        to={{pathname: `/pdf/${this.state.date}`, state: {data: this.state.trades}}}\r\n      >\r\n          <Button type=\"link\">Download</Button>\r\n      </Link>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ReportPDF;\r\n"]},"metadata":{},"sourceType":"module"}