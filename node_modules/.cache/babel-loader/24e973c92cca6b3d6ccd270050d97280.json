{"ast":null,"code":"import \"antd/es/table/style\";\nimport _Table from \"antd/es/table\";\nimport \"antd/es/tag/style\";\nimport _Tag from \"antd/es/tag\";\nimport _classCallCheck from \"C:\\\\Users\\\\hgaff\\\\OneDrive\\\\Documents\\\\derivativesnew\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\hgaff\\\\OneDrive\\\\Documents\\\\derivativesnew\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\hgaff\\\\OneDrive\\\\Documents\\\\derivativesnew\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\hgaff\\\\OneDrive\\\\Documents\\\\derivativesnew\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\hgaff\\\\OneDrive\\\\Documents\\\\derivativesnew\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport \"antd/es/typography/style\";\nimport _Typography from \"antd/es/typography\";\nvar _jsxFileName = \"C:\\\\Users\\\\hgaff\\\\OneDrive\\\\Documents\\\\derivativesnew\\\\src\\\\components\\\\reportpdf.js\";\nimport React from \"react\";\nvar Title = _Typography.Title;\n\nvar ReportPDF =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ReportPDF, _React$Component);\n\n  function ReportPDF() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ReportPDF);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ReportPDF)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      date: new Date(),\n      trades: [{\n        tradeid: \"\",\n        buyer: \"\",\n        seller: \"\",\n        product: \"\",\n        quantity: \"\",\n        notionalcurrency: \"\",\n        underlyingcurrency: \"\",\n        strikeprice: \"\",\n        marketvalue: \"\",\n        notionalvalue: \"\",\n        date: \"\",\n        time: \"\",\n        tags: \"\"\n      }, {\n        tradeid: \"\",\n        buyer: \"\",\n        seller: \"\",\n        product: \"\",\n        quantity: \"\",\n        notionalcurrency: \"\",\n        underlyingcurrency: \"\",\n        strikeprice: \"\",\n        marketvalue: \"\",\n        notionalvalue: \"\",\n        date: \"\",\n        time: \"\",\n        tags: \"\"\n      }, {\n        tradeid: \"\",\n        buyer: \"\",\n        seller: \"\",\n        product: \"\",\n        quantity: \"\",\n        notionalcurrency: \"\",\n        underlyingcurrency: \"\",\n        strikeprice: \"\",\n        marketvalue: \"\",\n        notionalvalue: \"\",\n        date: \"2020-3-3\",\n        time: \"\",\n        tags: []\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(ReportPDF, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var now = this.state.date.getTime();\n      console.log(\"date format for now is \".concat(now));\n      var fixedDate = new Date(this.state.trades[2].date).getTime();\n      console.log(\"date format for trade is \".concat(fixedDate)); // active editable is meant to be for trades added today right?\n      // I don't think we have data for these trades - maybe we have to filter it by\n      // the trades available on the portfolio page ?\n\n      var i;\n\n      for (i = 0; i < this.state.trades.length; i++) {\n        var expiry = new Date(this.state.trades[i].date).getTime();\n\n        if (expiry <= now) {\n          this.state.trades[i].tags = \"Inactive\";\n        } else {\n          this.state.trades[i].tags = \"Active\";\n        }\n      }\n\n      this.state.trades.filter(function (trade) {\n        return new Date(trade.date) > now.toString();\n      }) // this probably won't work because of formatting\n      .forEach(function (trade) {\n        return trade.tags = \"Active editable\";\n      });\n      this.state.trades.filter(function (trade) {\n        return trade.date == now;\n      }).forEach(function (trade) {\n        return trade.tags = \"Active uneditable\";\n      });\n      this.state.trades.filter(function (trade) {\n        return trade.date < now;\n      }).forEach(function (trade) {\n        return trade.tags = \"Inactive\";\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var columns = [{\n        title: \"Trade ID\",\n        dataIndex: \"tradeid\",\n        key: \"tradeid\"\n      }, {\n        title: \"Buying party\",\n        dataIndex: \"buyer\",\n        key: \"buyer\"\n      }, {\n        title: \"Selling party\",\n        dataIndex: \"seller\",\n        key: \"seller\"\n      }, {\n        title: \"Product\",\n        dataIndex: \"product\",\n        key: \"product\"\n      }, {\n        title: \"Quantity\",\n        dataIndex: \"quantity\",\n        key: \"quantity\"\n      }, {\n        title: \"Notional currency\",\n        dataIndex: \"notionalcurrency\",\n        key: \"notionalcurrency\"\n      }, {\n        title: \"Underlying currency\",\n        dataIndex: \"underlyingcurrency\",\n        key: \"underlyingcurrency\"\n      }, {\n        title: \"Strike price\",\n        dataIndex: \"strikeprice\",\n        key: \"strikeprice\"\n      }, {\n        title: \"Market value\",\n        dataIndex: \"marketvalue\",\n        key: \"marketvalue\"\n      }, {\n        title: \"Notional value\",\n        dataIndex: \"notionalvalue\",\n        key: \"notionalvalue\"\n      }, {\n        title: \"Expiry date\",\n        dataIndex: \"date\",\n        key: \"date\"\n      }, {\n        title: \"Expiry time\",\n        dataIndex: \"time\",\n        key: \"time\"\n      }, {\n        title: \"Tags\",\n        dataIndex: \"tags\",\n        key: \"tags\",\n        render: function render(tags) {\n          return React.createElement(React.Fragment, null, function (tag) {\n            var color = tag.length > 6 ? \"volcano\" : \"green\";\n            return React.createElement(_Tag, {\n              color: color,\n              key: tag,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 154\n              },\n              __self: this\n            }, tag.toUpperCase());\n          });\n        }\n      }];\n      return React.createElement(\"section\", {\n        style: {\n          margin: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \"Trade report\"), \"Report generated on \", this.state.date.toLocaleDateString(\"zh-CN\"), \" at \", this.state.date.toLocaleTimeString(), React.createElement(_Table, {\n        dataSource: this.state.trades,\n        columns: columns,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ReportPDF;\n}(React.Component);\n\nexport default ReportPDF;","map":{"version":3,"sources":["C:/Users/hgaff/OneDrive/Documents/derivativesnew/src/components/reportpdf.js"],"names":["React","Title","ReportPDF","state","date","Date","trades","tradeid","buyer","seller","product","quantity","notionalcurrency","underlyingcurrency","strikeprice","marketvalue","notionalvalue","time","tags","now","getTime","console","log","fixedDate","i","length","expiry","filter","trade","toString","forEach","columns","title","dataIndex","key","render","tag","color","toUpperCase","margin","toLocaleDateString","toLocaleTimeString","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Typography, Table, Tag } from \"antd\";\r\nconst { Title } = Typography;\r\n\r\nclass ReportPDF extends React.Component {\r\n  state = {\r\n    date: new Date(),\r\n    trades: [\r\n      {\r\n        tradeid: \"\",\r\n        buyer: \"\",\r\n        seller: \"\",\r\n        product: \"\",\r\n        quantity: \"\",\r\n        notionalcurrency: \"\",\r\n        underlyingcurrency: \"\",\r\n        strikeprice: \"\",\r\n        marketvalue: \"\",\r\n        notionalvalue: \"\",\r\n        date: \"\",\r\n        time: \"\",\r\n        tags: \"\"\r\n      },\r\n      {\r\n        tradeid: \"\",\r\n        buyer: \"\",\r\n        seller: \"\",\r\n        product: \"\",\r\n        quantity: \"\",\r\n        notionalcurrency: \"\",\r\n        underlyingcurrency: \"\",\r\n        strikeprice: \"\",\r\n        marketvalue: \"\",\r\n        notionalvalue: \"\",\r\n        date: \"\",\r\n        time: \"\",\r\n        tags: \"\"\r\n      },\r\n      {\r\n        tradeid: \"\",\r\n        buyer: \"\",\r\n        seller: \"\",\r\n        product: \"\",\r\n        quantity: \"\",\r\n        notionalcurrency: \"\",\r\n        underlyingcurrency: \"\",\r\n        strikeprice: \"\",\r\n        marketvalue: \"\",\r\n        notionalvalue: \"\",\r\n        date: \"2020-3-3\",\r\n        time: \"\",\r\n        tags: []\r\n      }\r\n    ]\r\n  };\r\n  componentDidMount() {\r\n    var now = this.state.date.getTime();\r\n    console.log(`date format for now is ${now}`);\r\n    var fixedDate = new Date(this.state.trades[2].date).getTime();\r\n    console.log(`date format for trade is ${fixedDate}`);\r\n    // active editable is meant to be for trades added today right?\r\n    // I don't think we have data for these trades - maybe we have to filter it by\r\n    // the trades available on the portfolio page ?\r\n    var i;\r\n    for (i = 0; i < this.state.trades.length; i++) {\r\n      var expiry = new Date(this.state.trades[i].date).getTime();\r\n      if (expiry <= now) {\r\n        this.state.trades[i].tags = \"Inactive\";\r\n      } else {\r\n        this.state.trades[i].tags = \"Active\";\r\n      }\r\n    }\r\n    this.state.trades\r\n      .filter(trade => new Date(trade.date) > now.toString()) // this probably won't work because of formatting\r\n      .forEach(trade => (trade.tags = \"Active editable\"));\r\n    this.state.trades\r\n      .filter(trade => trade.date == now)\r\n      .forEach(trade => (trade.tags = \"Active uneditable\"));\r\n    this.state.trades\r\n      .filter(trade => trade.date < now)\r\n      .forEach(trade => (trade.tags = \"Inactive\"));\r\n  }\r\n  render() {\r\n    const columns = [\r\n      {\r\n        title: \"Trade ID\",\r\n        dataIndex: \"tradeid\",\r\n        key: \"tradeid\"\r\n      },\r\n      {\r\n        title: \"Buying party\",\r\n        dataIndex: \"buyer\",\r\n        key: \"buyer\"\r\n      },\r\n      {\r\n        title: \"Selling party\",\r\n        dataIndex: \"seller\",\r\n        key: \"seller\"\r\n      },\r\n      {\r\n        title: \"Product\",\r\n        dataIndex: \"product\",\r\n        key: \"product\"\r\n      },\r\n      {\r\n        title: \"Quantity\",\r\n        dataIndex: \"quantity\",\r\n        key: \"quantity\"\r\n      },\r\n      {\r\n        title: \"Notional currency\",\r\n        dataIndex: \"notionalcurrency\",\r\n        key: \"notionalcurrency\"\r\n      },\r\n      {\r\n        title: \"Underlying currency\",\r\n        dataIndex: \"underlyingcurrency\",\r\n        key: \"underlyingcurrency\"\r\n      },\r\n      {\r\n        title: \"Strike price\",\r\n        dataIndex: \"strikeprice\",\r\n        key: \"strikeprice\"\r\n      },\r\n      {\r\n        title: \"Market value\",\r\n        dataIndex: \"marketvalue\",\r\n        key: \"marketvalue\"\r\n      },\r\n      {\r\n        title: \"Notional value\",\r\n        dataIndex: \"notionalvalue\",\r\n        key: \"notionalvalue\"\r\n      },\r\n      {\r\n        title: \"Expiry date\",\r\n        dataIndex: \"date\",\r\n        key: \"date\"\r\n      },\r\n      {\r\n        title: \"Expiry time\",\r\n        dataIndex: \"time\",\r\n        key: \"time\"\r\n      },\r\n      {\r\n        title: \"Tags\",\r\n        dataIndex: \"tags\",\r\n        key: \"tags\",\r\n        render: tags => (\r\n          <>\r\n            {tag => {\r\n              let color = tag.length > 6 ? \"volcano\" : \"green\";\r\n              return (\r\n                <Tag color={color} key={tag}>\r\n                  {tag.toUpperCase()}\r\n                </Tag>\r\n              );\r\n            }}\r\n          </>\r\n        )\r\n      }\r\n    ];\r\n    return (\r\n      <section style={{ margin: 20 }}>\r\n        <Title>Trade report</Title>\r\n        {\"Report generated on \"}\r\n        {this.state.date.toLocaleDateString(\"zh-CN\")}\r\n        {\" at \"}\r\n        {this.state.date.toLocaleTimeString()}\r\n        <Table dataSource={this.state.trades} columns={columns} />\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ReportPDF;\r\n"]},"metadata":{},"sourceType":"module"}